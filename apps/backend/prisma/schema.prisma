// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  password  String
  role      Role      @default(BROKER)
  brokerId  String
  broker    Broker    @relation(fields: [brokerId], references: [id])
  companies Company[]
  plans     Plan[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Broker {
  id               String    @id @default(uuid())
  name             String    @unique
  users            User[]
  companies        Company[]
  planLimit        Int       @map("plans")
  currentPlanCount Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Company {
  id        String   @id @default(uuid())
  name      String
  brokerId  String?
  broker    Broker?  @relation(fields: [brokerId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  plans     Plan[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id                   String        @id @default(uuid())
  name                 String
  year                 Int
  deductible           Float?
  moop                 Float?
  t1CostSharingType    CostShareType
  t2CostSharingType    CostShareType
  t3CostSharingType    CostShareType
  t4CostSharingType    CostShareType
  monthlyPremiumRx     Float?
  integratedDeductible Boolean       @default(false)
  t1ShareValue         Float?
  t2ShareValue         Float?
  t3ShareValue         Float?
  t4ShareValue         Float?
  t1UsesDeductible     Boolean       @default(false)
  t2UsesDeductible     Boolean       @default(false)
  t3UsesDeductible     Boolean       @default(false)
  t4UsesDeductible     Boolean       @default(false)
  t1CapValue           Int           @default(0)
  t2CapValue           Int           @default(0)
  t3CapValue           Int           @default(0)
  t4CapValue           Int           @default(0)

  type        PlanType
  company     Company      @relation(fields: [companyId], references: [id])
  companyId   String
  evaluations Evaluation[]
  userId      String
  user        User         @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Evaluation {
  id                   String              @id @default(uuid())
  plan                 Plan                @relation(fields: [planId], references: [id])
  planId               String
  method               DeterminationMethod
  result               CreditabilityStatus
  isCreditable         Boolean
  reasoning            String?
  actuarialValue       Float?
  actuarialAssumptions Json?
  createdAt            DateTime            @default(now())
}

enum Role {
  BROKER
  ADMIN
}

enum CreditabilityStatus {
  CREDITABLE
  NON_CREDITABLE
  UNKNOWN
}

enum DeterminationMethod {
  SIMPLIFIED
  ACTUARIAL
}

enum PlanType {
  STANDARD
  HIGH_DEDUCTIBLE
}

enum CostShareType {
  COPAY
  COINSURANCE
}
